# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from HistoryPlotWindow import Ui_HistoryPlotWindow
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
from pathlib import Path
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
from matplotlib.figure import Figure


import matplotlib
import pyqtgraph as pg
import numpy as np
import pandas as pd
import math
import csv
import os.path, time

matplotlib.use('Qt5Agg')

class MplCanvas(FigureCanvasQTAgg):

    def __init__(self, parent=None, width=5, height=4, dpi=100, optionName = "", filePath=""):
        fig = Figure(figsize=(width, height), dpi=dpi)
        fig.suptitle(optionName + " Price History")# name title
        self.axes = fig.add_subplot(111)
        self.axes.set_ylabel(ylabel=optionName + " Price Price USD")
        self.axes.set_xlabel(xlabel="Date")
        FigureCanvasQTAgg.__init__(self,fig)
        self.setParent(parent)
        self.plot_value(filePath)

    def plot_value(self,filePath):
        # Create our pandas DataFrame with some simple
        # data and headers.
        df = pd.read_csv(filePath)
        df["Date"] = pd.to_datetime(df['Date'])
        df.set_index('Date', inplace=True)
        df.set_index('Close', inplace=False)
        #df=df['Close']
        df=pd.DataFrame(df[['Close','High']],columns=['Close','High'])

        # plot the pandas DataFrame, passing in the
        # matplotlib Canvas axes.
        df.plot(ax=self.axes)
        #HistoryPlotWindow.setCentralWidget(sc)


class Ui_MainWindow(object):
    def onCreate(self):
        # add global string to share selected option to multiple instance
        # data value to create plot based on dataset
        self.currentPredictDataType = "Close"
        self.dataFilePath = ''

    def openHistoryPlotWindow(self):
        self.historyWindow = QtWidgets.QMainWindow()
        self.ui = Ui_HistoryPlotWindow(self.currentPredictDataType, self.dataFilePath)
        self.ui.setupUi(self.historyWindow)
        self.historyWindow.show()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1436, 1139)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.browseGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.browseGroupBox.setGeometry(QtCore.QRect(30, 10, 671, 121))
        self.browseGroupBox.setObjectName("browseGroupBox")
        self.browseButton = QtWidgets.QPushButton(self.browseGroupBox)
        self.browseButton.setGeometry(QtCore.QRect(540, 60, 101, 41))
        self.browseButton.setObjectName("browseButton")
        self.selectedLabel = QtWidgets.QLabel(self.browseGroupBox)
        self.selectedLabel.setGeometry(QtCore.QRect(0, 20, 641, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.selectedLabel.setFont(font)
        self.selectedLabel.setObjectName("selectedLabel")
        self.datGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.datGroupBox.setGeometry(QtCore.QRect(10, 200, 1411, 911))
        self.datGroupBox.setObjectName("datGroupBox")
        self.fileDataTableView = QtWidgets.QTableView(self.datGroupBox)
        self.fileDataTableView.setGeometry(QtCore.QRect(0, 30, 721, 341))
        self.fileDataTableView.setObjectName("fileDataTableView")
        self.dataComboBox = QtWidgets.QComboBox(self.datGroupBox)
        self.dataComboBox.setGeometry(QtCore.QRect(0, 380, 91, 31))
        self.dataComboBox.setObjectName("dataComboBox")
        self.showDataButton = QtWidgets.QPushButton(self.datGroupBox)
        self.showDataButton.setGeometry(QtCore.QRect(100, 380, 121, 41))
        self.showDataButton.setObjectName("showDataButton")
        self.plotHistoryGroupBox = QtWidgets.QGroupBox(self.datGroupBox)
        self.plotHistoryGroupBox.setGeometry(QtCore.QRect(760, 20, 651, 351))
        self.plotHistoryGroupBox.setObjectName("groupBox")
        self.predictDataGroupBox = QtWidgets.QGroupBox(self.datGroupBox)
        self.predictDataGroupBox.setGeometry(QtCore.QRect(0, 430, 721, 351))
        self.predictDataGroupBox.setObjectName("groupBox_2")
        self.predictDiagramGroupBox = QtWidgets.QGroupBox(self.datGroupBox)
        self.predictDiagramGroupBox.setGeometry(QtCore.QRect(750, 430, 651, 351))
        self.predictDiagramGroupBox.setObjectName("groupBox_3")
        self.showPredictionButton = QtWidgets.QPushButton(self.centralwidget)
        self.showPredictionButton.setGeometry(QtCore.QRect(1160, 140, 121, 41))
        self.showPredictionButton.setObjectName("showPredictionButton")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1436, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)


        self.addDataToDataComboBox()
        # Initialize onCreate Variable
        self.onCreate()

        # Event
        self.addEvent()

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.browseGroupBox.setTitle(_translate("MainWindow", "Choose Data File"))
        self.browseButton.setText(_translate("MainWindow", "BROWSE"))
        self.selectedLabel.setText(_translate("MainWindow", "No file selected"))
        self.datGroupBox.setTitle(_translate("MainWindow", "Display Data"))
        self.showDataButton.setText(_translate("MainWindow", "Show Data History"))
        self.plotHistoryGroupBox.setTitle(_translate("MainWindow", "Plot History")) #group box
        self.predictDataGroupBox.setTitle(_translate("MainWindow", "Predict Data")) #group box 2
        self.predictDiagramGroupBox.setTitle(_translate("MainWindow", "Prediction Diagram")) #group box 3
        self.showPredictionButton.setText(_translate("MainWindow", "Show Prediction"))

    def addEvent(self):
        self.dataComboBoxEvent()
        self.browseEvent()
        self.plotHistoryData()
        #self.browseButton_Test.clicked.connect(self.test)

    # region update_csv
    def getCsvLastModified(self):
        self.lastModFile = time.ctime(os.path.getmtime(self.dataFilePath))
        # print(time.ctime(os.path.getmtime(self.dataFilePath)))

    def printLogLastModifiedFile(self):
        self.logFile = self.dataFileName + '\t' + self.lastModFile

    def printToLogFile(self):
        with open('LOG.txt', 'a+') as f:
            f.write(self.logFile)

    def checkLog(self):
        with open('LOG.txt', 'r') as f:
            for line in f:
                if (line == self.logFile):
                    return False
        return True

    # endregion

    # region dataComboBox
    def dataComboBoxEvent(self):
        # default option for dataComboBox
        # currentSelected = "Close Price"

        # Connect dataComboBox to change selected option
        self.dataComboBox.currentTextChanged.connect(self.dataComboBoxClicked)

    def addDataToDataComboBox(self):
        # Add options
        self.dataComboBox.addItems(["Close Price", "Open Price", "Highest", "Lowest"])

    def dataComboBoxClicked(self, currentSelected):
        currentSelected = self.dataComboBox.currentText()
        self.currentPredictDataType = self.setCurrentPredictionType(currentSelected)
        print(self.currentPredictDataType)

    def setCurrentPredictionType(self, currentSelected):
        return {
            'Close Price': 'Close',
            'Open Price': 'Open',
            'Highest': 'High',
            'Lowest': 'Low'
        }.get(currentSelected, 'Close')

    # endregion

    # region browse
    # Browse Event
    def browseEvent(self):
        self.setModelDataTableView()
        self.browseButton.clicked.connect(self.openFileDialog)

    # set model for fileDataTableView
    def setModelDataTableView(self):
        self.model = QtGui.QStandardItemModel(self.centralwidget)
        self.fileDataTableView.setModel(self.model)
        self.fileDataTableView.horizontalHeader().setStretchLastSection(True)

    # Create openfile dialog when browse button cliked
    def openFileDialog(self):
        dlg = QFileDialog()
        dlg.setFileMode(QFileDialog.AnyFile)
        if dlg.exec_():
            filenames = dlg.selectedFiles()
            # Get string of selected file
            str = self.listToString(filenames)
            # Change currentTextlabel with selected file path
            self.changeSelectedLabel(str)
            # Set dataFilePath
            self.dataFilePath = str
            self.dataFileName = Path(str).stem
            # Populate dataTableView with data in the file
            self.loadCsv(str)
            #760, 20, 651, 351
            sc = MplCanvas(MainWindow, width=6, height=3, dpi=100, optionName = 'Close', filePath = str)  # change in here
            sc.move(800,250)
            sc.show()
            print()
            #ui = Ui_MainWindow()
            #ui.setupUi(MainWindow)
            
            

    # Get full path as string  from openFileDialog
    def listToString(self, s):
        str1 = ""
        for word in s:
            str1 = str1 + word
        return str1

    # Change currentTextlabel with selected file path
    def changeSelectedLabel(self, text):
        self.selectedLabel.setText(text)

    # Populate dataTableView with data in the file
    def loadCsv(self, fileName):
        with open(fileName, "r") as fileInput:
            for row in csv.reader(fileInput):
                items = [
                    QtGui.QStandardItem(field)
                    for field in row
                ]
                self.model.appendRow(items)



    # endregion

    # region plot history data
    def plotHistoryData(self):
        self.showDataButton.clicked.connect(self.openHistoryPlotWindow)

    # endregion

    # region test_def
    def test(self):
        self.getCsvLastModified()
        self.printLogLastModifiedFile()
        if (self.checkLog() == True):
            self.printToLogFile()

# endregion

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
