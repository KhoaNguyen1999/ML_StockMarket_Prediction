# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from HistoryPlotWindow import Ui_HistoryPlotWindow
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import numpy as np
import pandas as pd
import math
import csv


class Ui_MainWindow(object):
    def onCreate(self):
        #add global string to share selected option to multiple instance
        #data value to create plot based on dataset
        self.currentPredictDataType="Close"
        self.dataFilePath = ''

    def openHistoryPlotWindow(self):
        self.historyWindow = QtWidgets.QMainWindow()
        self.ui = Ui_HistoryPlotWindow(self.currentPredictDataType,self.dataFilePath)
        self.ui.setupUi(self.historyWindow)
        self.historyWindow.show()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1314, 956)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.browseGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.browseGroupBox.setGeometry(QtCore.QRect(30, 10, 1221, 121))
        self.browseGroupBox.setObjectName("browseGroupBox")
        self.browseButton = QtWidgets.QPushButton(self.centralwidget)
        self.browseButton.setGeometry(QtCore.QRect(900, 40, 101, 41))
        self.browseButton.setObjectName("browseButton")

        self.browseButton_Test = QtWidgets.QPushButton(self.browseGroupBox)
        self.browseButton_Test.setGeometry(QtCore.QRect(1002, 40, 101, 41))
        self.browseButton_Test.setObjectName("browseButton_Test")

        self.selectedLabel = QtWidgets.QLabel(self.browseGroupBox)
        self.selectedLabel.setGeometry(QtCore.QRect(10, 50, 890, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.selectedLabel.setFont(font)
        self.selectedLabel.setObjectName("selectedLabel")
        self.datGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.datGroupBox.setGeometry(QtCore.QRect(10, 200, 1271, 721))
        self.datGroupBox.setObjectName("datGroupBox")
        self.fileDataTableView = QtWidgets.QTableView(self.datGroupBox)
        self.fileDataTableView.setGeometry(QtCore.QRect(20, 40, 1241, 691))
        self.fileDataTableView.setObjectName("fileDataTableView")
        self.showDataButton = QtWidgets.QPushButton(self.centralwidget)
        self.showDataButton.setGeometry(QtCore.QRect(1020, 140, 121, 41))
        self.showDataButton.setObjectName("showDataButton")
        self.showPredictionButton = QtWidgets.QPushButton(self.centralwidget)
        self.showPredictionButton.setGeometry(QtCore.QRect(1160, 140, 121, 41))
        self.showPredictionButton.setObjectName("showPredictionButton")
        self.dataComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.dataComboBox.setGeometry(QtCore.QRect(920, 140, 91, 31))
        self.dataComboBox.setObjectName("dataComboBox")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1314, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.addDataToDataComboBox()
        #Initialize onCreate Variable
        self.onCreate()

        #Event
        self.addEvent()

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.browseGroupBox.setTitle(_translate("MainWindow", "Browse"))
        self.browseButton.setText(_translate("MainWindow", "BROWSE"))
        self.browseButton_Test.setText(_translate("MainWindow", "BROWSE_TEST"))
        self.selectedLabel.setText(_translate("MainWindow", "No file selected"))
        self.datGroupBox.setTitle(_translate("MainWindow", "Display Data"))
        self.showDataButton.setText(_translate("MainWindow", "Show Data History"))
        self.showPredictionButton.setText(_translate("MainWindow", "Show Prediction"))

    def addEvent(self):
        self.dataComboBoxEvent()
        self.browseEvent()
        self.plotHistoryData()
        self.browseButton_Test.clicked.connect(self.test)
     
#region dataComboBox   
    def dataComboBoxEvent(self):
        #default option for dataComboBox
        #currentSelected = "Close Price"

        #Connect dataComboBox to change selected option
        self.dataComboBox.currentTextChanged.connect(self.dataComboBoxClicked)


    def addDataToDataComboBox(self):
        #Add options
        self.dataComboBox.addItems(["Close Price","Open Price", "Highest", "Lowest"])

    def dataComboBoxClicked(self, currentSelected):
        currentSelected = self.dataComboBox.currentText()
        self.currentPredictDataType = self.setCurrentPredictionType(currentSelected)
        print(self.currentPredictDataType)

    def setCurrentPredictionType(self,currentSelected):
        return {
            'Close Price':'Close',
            'Open Price':'Open',
            'Highest':'High',
            'Lowest':'Low'
        }.get(currentSelected,'Close')

#endregion

#region browse
    #Browse Event
    def browseEvent(self):
        self.setModelDataTableView()
        self.browseButton.clicked.connect(self.openFileDialog)

    #set model for fileDataTableView
    def setModelDataTableView(self):
        self.model = QtGui.QStandardItemModel(self.centralwidget)
        self.fileDataTableView.setModel(self.model)
        self.fileDataTableView.horizontalHeader().setStretchLastSection(True)

    #Create openfile dialog when browse button cliked
    def openFileDialog(self):
        dlg = QFileDialog()
        dlg.setFileMode(QFileDialog.AnyFile)
        if dlg.exec_():
            filenames = dlg.selectedFiles()
            #Get string of selected file
            str = self.listToString(filenames)
            #Change currentTextlabel with selected file path
            self.changeSelectedLabel(str)
            #Set dataFilePath
            self.dataFilePath = str
            #Populate dataTableView with data in the file
            self.loadCsv(str)

    #Get full path as string  from openFileDialog
    def listToString(self, s):
        str1 =""
        for word in s:
            str1 = str1 + word
        return str1

    #Change currentTextlabel with selected file path
    def changeSelectedLabel(self,text):
        self.selectedLabel.setText(text)

    #Populate dataTableView with data in the file
    def loadCsv(self, fileName):
        with open(fileName, "r") as fileInput:
            for row in csv.reader(fileInput):    
                items = [
                    QtGui.QStandardItem(field)
                    for field in row
                ]
                self.model.appendRow(items)

#endregion


#region plot history data
    def plotHistoryData(self):
        self.showDataButton.clicked.connect(self.openHistoryPlotWindow)

#endregion

#region test_def
    def test(self):
        df = pd.read_csv(r'G:\University\Machine Learning\a.us.csv')
        #Create a new dataframe with only close column
        data = df.filter(['Close'])
        #Convert dataframe to numpy array
        dataset = data.values
        #Get the number of rows to train the model on
        training_data_len = math.ceil(len(dataset) * .8)
        scaler = MinMaxScaler(feature_range=(0,1))
        scaled_data = scaler.fit_transform(dataset)

        #Create the training data set
        #Create the scaled training data set
        train_data = scaled_data[0:training_data_len, :]
        #Split the data into x_train and y_train dataset
        x_train = []
        y_train = []

        for i in range(60, len(train_data)):
            x_train.append(train_data[i-60:i ,0])
            y_train.append(train_data[i,0])
            if i <= 60:
                print(x_train)
                print(y_train)
                print()

        x_train, y_train = np.array(x_train) , np.array(y_train)
        x_train = np.reshape(x_train,(x_train.shape[0],x_train.shape[1],1))
        x_train.shape

        model = Sequential()
        model.add(LSTM(50, return_sequences= True ,input_shape = (x_train.shape[1],1)))
        model.add(LSTM(50, return_sequences = False))
        model.add(Dense(25))
        model.add(Dense(1))
        model.compile(optimizer = 'adam', loss = 'mean_squared_error')
        model.fit(x_train,y_train, batch_size = 1 , epochs=1)

#endregion



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
